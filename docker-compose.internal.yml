#
# Redis
#
redis1:
  image: redis:3.0.3
  restart: always
  entrypoint: [ "/usr/local/bin/redis-server", "--bind", "0.0.0.0", "--port", "6379", "--maxclients", "200", "--dir", "/tmp", "--save", ""]

redis2:
  image: redis:3.0.3
  restart: always
  links:
    - redis1
  entrypoint: [ "/usr/local/bin/redis-server", "--bind", "0.0.0.0",  "--port", "6380", "--slaveof", "redis1", "6379", "--maxclients", "200", "--dir", "/tmp", "--save", ""]

sentinel1:
  image: redis:3.0.3
  restart: 'on-failure:5'
  links:
    - redis1
    - redis2
  ports:
    - 26379
  entrypoint:
    - /bin/bash
    - -c
    - |
      echo 'sentinel monitor gitter-master-dev redis1 6379 1' > /redis-sentinel.conf &&
      exec /usr/local/bin/redis-server /redis-sentinel.conf --sentinel --bind 0.0.0.0 --maxclients 200

#
# Mongo
#
mongo1:
  image: mongo:3.0
  restart: always
  links:
    - mongo2
    - mongo3
  entrypoint: [ "/usr/bin/mongod", "--replSet", "troupeSet", "--journal", "--smallfiles", "--storageEngine=wiredTiger", "--oplogSize=20", "--port=27017" ]

mongo2:
  image: mongo:3.0
  restart: always
  entrypoint: [ "/usr/bin/mongod", "--replSet", "troupeSet", "--journal", "--smallfiles", "--storageEngine=wiredTiger", "--oplogSize=20", "--port=27018" ]

mongo3:
  image: mongo:3.0
  restart: always
  entrypoint: [ "/usr/bin/mongod", "--replSet", "troupeSet", "--journal", "--smallfiles", "--storageEngine=wiredTiger", "--oplogSize=20", "--port=27019" ]

mongosetup:
  image: mongo:3.0
  restart: 'no'
  links:
    - mongo1
    - mongo2
    - mongo3
  volumes:
   - ${WORKSPACE}:/src
  environment:
    ANNOUNCE_MONGO1_HOST: ""
    ANNOUNCE_MONGO2_HOST: ""
    ANNOUNCE_MONGO3_HOST: ""
  working_dir: /src
  entrypoint: [ "/src/scripts/docker/mongo/mongo-setup.sh" ]

neo4j:
  image: kbastani/docker-neo4j
  restart: always

elasticsearch:
  image: elasticsearch:1.4.2
  links:
    - mongo1
    - mongo2
    - mongo3
  volumes:
   - ${WORKSPACE}:/src
  environment:
    ANNOUNCE_ES_HOST:
  working_dir: /src
  entrypoint: [ "/src/scripts/docker/es/start-elasticsearch.sh" ]

elasticsearchsetup:
  image: node:0.10
  restart: 'no'
  links:
    - mongo1
    - mongo2
    - mongo3
    - elasticsearch
  volumes:
   - ${WORKSPACE}:/src
  working_dir: /src
  entrypoint: [ "/src/scripts/docker/es/setup-elasticsearch.sh" ]

internal-min:
  image: node:0.10
  restart: 'no'
  links:
    - redis1
    - redis2
    - mongo1
    - mongo2
    - mongo3
    - sentinel1
  environment:
    SU_TO_USER: ${SU_TO_USER}
    SU_TO_UID: ${SU_TO_UID}
  volumes:
   - ${WORKSPACE}:/src
  working_dir: /src

internal:
  image: node:0.10
  restart: 'no'
  links:
    - redis1
    - redis2
    - neo4j
    - mongo1
    - mongo2
    - mongo3
    - elasticsearch
    - sentinel1
  volumes:
   - ${WORKSPACE}:/src
  working_dir: /src
