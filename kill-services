#!/bin/bash

# This may be set for node debug, but those
# values will break python scripts
export DEBUG=

set -euo pipefail

DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME-default}

function has_local_docker_install {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    return 0
  fi

  # Is Docker for Mac running?
  if (pgrep -f /Applications/Docker.app/Contents/MacOS/Docker > /dev/null); then
    return 0
  fi

  return 1
}

function get_ip {
  if has_local_docker_install; then
    echo "127.0.0.1"
  else
    echo "$(docker-machine ip $DOCKER_MACHINE_NAME)"
  fi
}

function docker_machine_query {
  docker-machine ls -q --filter name=$DOCKER_MACHINE_NAME "$@"|grep -q "^${DOCKER_MACHINE_NAME}$"
}

function stopDockerMachine {
  if docker_machine_query --filter state=Error; then
    echo "-- Docker machine [$DOCKER_MACHINE_NAME] is in an error state. Deleting."
    docker-machine rm -f "$DOCKER_MACHINE_NAME"
  fi

  if docker_machine_query; then
    ## Start the box if it's stopped
    if ! docker_machine_query --filter state=Stopped; then
      echo "-- Stopping docker machine $DOCKER_MACHINE_NAME."
      docker-machine stop $DOCKER_MACHINE_NAME
    fi
  fi

}

function stopDockerServices {
  echo "-- Stop services using docker-compose"
  docker-compose stop
  docker-compose rm -f
}


if ! has_local_docker_install; then
  eval "$(docker-machine env $DOCKER_MACHINE_NAME)"
fi

DOCKER_HOST_IP="$(get_ip)"
export DOCKER_HOST_IP

WORKSPACE="$(pwd)"
export WORKSPACE

stopDockerServices

if ! has_local_docker_install; then
  stopDockerMachine
fi
