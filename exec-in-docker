#!/bin/bash -eu

set -u
set -e
set -x

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

WORKSPACE="${WORKSPACE-$SCRIPT_DIR}"
DEBUG="${DEBUG:-}"
NODE_ENV="${NODE_ENV:-test-docker}"
NODE_VERSION="$(node --version)"
NODE_VERSION="${NODE_VERSION#v}" # Drop the `v` prefix

export WORKSPACE
export DEBUG
export NODE_VERSION
export NODE_ENV

SU_TO_UID=${UID}
SU_TO_USER=${USER}
export SU_TO_USER
export SU_TO_UID


case $OSTYPE in
  darwin*)
    TARGET_DOCKER_CONTAINER=internal-mac
    mkdir -p "${SCRIPT_DIR}/node_modules_linux"
  ;;
  *)
    TARGET_DOCKER_CONTAINER=internal-min
    ;;
esac

function mongo_run {
  docker-compose -p "${PROJECT_NAME}" -f docker-compose.internal.yml run --rm "${1}"
}

ISOLATED_UNIQ_ID=${BUILD_NUMBER:-$(date +"%Y%m%d%H%M%S")}
PROJECT_NAME="webapp${ISOLATED_UNIQ_ID}"

function finish {
  docker-compose -p "${PROJECT_NAME}" -f docker-compose.internal.yml stop
  docker-compose -p "${PROJECT_NAME}" -f docker-compose.internal.yml rm -f -v
}
trap finish EXIT

function setup_env {
  (mongo_run mongosetup ) &
  (sleep 2; mongo_run elasticsearchsetup) &
  echo "Waiting for setup to complete"
  wait
  echo "Setup complete"
}

if [[ -z "${SKIP_COMPOSE_SETUP:-}" ]]; then
  setup_env
fi

docker-compose -p "${PROJECT_NAME}" -f docker-compose.internal.yml run \
    -e "NODE_ENV=${NODE_ENV}" \
    -e "DEBUG=${DEBUG}" \
    -e "GIT_COMMIT=${GIT_COMMIT:-}" \
    -e "GIT_BRANCH=${GIT_BRANCH:-}" \
    -e "BUILD_NUMBER=${BUILD_NUMBER:-}" \
    -e "BUILD_URL=${BUILD_URL:-}" \
    -e "WORKSPACE=${WORKSPACE:-}" \
    -e "ghprbPullId=${ghprbPullId:-}" \
    -e "ghprbActualCommit=${ghprbActualCommit:-}" \
    -e "ghprbSourceBranch=${ghprbSourceBranch:-}" \
    "${TARGET_DOCKER_CONTAINER}" \
    "${WORKSPACE}/scripts/docker/exec/exec.sh" "$@"

echo "docker-compose run exited with $?"

docker-compose -p "${PROJECT_NAME}" -f docker-compose.internal.yml ps
docker ps -a|grep "${PROJECT_NAME}"

echo "exec-in-docker complete, shutting down"
