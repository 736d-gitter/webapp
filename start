#!/bin/bash

# This may be set for node debug, but those
# values will break python scripts
export DEBUG=

set -euo pipefail

DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME-default}

function get_ip {
  if [[ "$OSTYPE" != "linux-gnu" ]]; then
    echo "$(docker-machine ip $DOCKER_MACHINE_NAME)"
  else
    ip route get 8.8.8.8 | head -1 | cut -d' ' -f8
  fi
}

function docker_machine_query {
  docker-machine ls -q --filter name=$DOCKER_MACHINE_NAME "$@"|grep -q "^${DOCKER_MACHINE_NAME}$"
}

function startDockerMachine {
  if docker_machine_query --filter state=Error; then
    echo "-- Docker machine [$DOCKER_MACHINE_NAME] is in an error state. Deleting."
    docker-machine rm -f "$DOCKER_MACHINE_NAME"
  fi

  if ! docker_machine_query; then
    echo "-- Docker machine $DOCKER_MACHINE_NAME does not exist. Creating."
    # Maybe one day --virtualbox-boot2docker-url https://github.com/rancher/os/releases/download/v0.3.3/machine-rancheros.iso
    # but it doesn't support shared volumes right now
    docker-machine create \
      -d virtualbox \
      --virtualbox-disk-size "30000" \
      --virtualbox-hostonly-cidr "192.168.99.1/24" \
      --virtualbox-memory "2048" \
      --virtualbox-cpu-count "2" \
      $DOCKER_MACHINE_NAME
  else
    ## Start the box if it's stopped
    if docker_machine_query --filter state=Stopped; then
      echo "-- Docker machine $DOCKER_MACHINE_NAME is not running. Starting."

      docker-machine start $DOCKER_MACHINE_NAME
    else
      echo "-- Docker machine $DOCKER_MACHINE_NAME is running."
    fi
  fi

  eval "$(docker-machine env $DOCKER_MACHINE_NAME)"
}

UPDATE_HOSTS=""
function promptForUpdate {
  case "$UPDATE_HOSTS" in
    "YES") return 0;;
    "NO") return 1;;
  esac

  >&2 echo "Warning. Your current $HOSTNAME ($CURRENT_ALIAS) hostname does not match the IP $IP"
  read -p "Would you like to update your hostfile? Requires sudo [yN] " -r
  echo
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    UPDATE_HOSTS="YES"
    return 0
  else
    UPDATE_HOSTS="NO"
    return 1
  fi
}

function setupHostAlias {
  HOSTNAME=$1
  IP=$2
  CURRENT_ALIAS=$(grep " $HOSTNAME *$" /etc/hosts|sed 's/ .*//')
  if [[ "$CURRENT_ALIAS" != "$IP" ]]; then
    if promptForUpdate; then
      TMP_HOSTS_FILE="/tmp/hosts.start.$RANDOM"
      sudo /bin/sh -c "
        grep -v \" $HOSTNAME *$\" /etc/hosts > \"$TMP_HOSTS_FILE\" &&
        echo \"$IP $HOSTNAME\" >> \"$TMP_HOSTS_FILE\" &&
        cat \"$TMP_HOSTS_FILE\" > /etc/hosts &&
        rm -f \"$TMP_HOSTS_FILE\"
      "
    else
      echo Remember to add \'"$IP" "$HOSTNAME"\' to your /etc/hosts file
    fi

  fi
}

function startDockerServices {
  echo "-- Starting services using docker-compose"
  docker-compose up -d --no-recreate
}


if [[ "$OSTYPE" != "linux-gnu" ]]; then
  startDockerMachine
fi

DOCKER_HOST_IP="$(get_ip)"
export DOCKER_HOST_IP

WORKSPACE="$(pwd)"
export WORKSPACE

setupHostAlias gitter-mongo-dev "$DOCKER_HOST_IP"
setupHostAlias gitter-redis-dev "$DOCKER_HOST_IP"
setupHostAlias gitter-neo4j-dev "$DOCKER_HOST_IP"
setupHostAlias gitter-es-dev    "$DOCKER_HOST_IP"

startDockerServices

docker-machine env "${DOCKER_MACHINE_NAME}"
