#!/bin/bash

# This may be set for node debug, but those
# values will break python scripts
export DEBUG=

set -euo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME-default}

function has_local_docker_install {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    return 0
  fi

  # Is Docker for Mac running?
  if (pgrep -f /Applications/Docker.app/Contents/MacOS/Docker > /dev/null); then
    return 0
  fi

  return 1
}

get_local_ip() {
    local _ip _line
    while IFS=$': \t' read -a _line ;do
        [ -z "${_line%inet}" ] &&
           _ip=${_line[${#_line[1]}>4?1:2]} &&
           [ "${_ip#127.0.0.1}" ] && echo $_ip && return 0
      done< <(LANG=C /sbin/ifconfig)
}

function get_ip {
  if has_local_docker_install; then
    get_local_ip
  else
    echo "$(docker-machine ip $DOCKER_MACHINE_NAME)"
  fi
}

function docker_machine_query {
  docker-machine ls -q --filter name=$DOCKER_MACHINE_NAME "$@"|grep -q "^${DOCKER_MACHINE_NAME}$"
}

function startDockerMachine {
  if docker_machine_query --filter state=Error; then
    echo "-- Docker machine [$DOCKER_MACHINE_NAME] is in an error state. Deleting."
    docker-machine rm -f "$DOCKER_MACHINE_NAME"
  fi

  if ! docker_machine_query; then
    echo "-- Docker machine $DOCKER_MACHINE_NAME does not exist. Creating."
    # Maybe one day --virtualbox-boot2docker-url https://github.com/rancher/os/releases/download/v0.3.3/machine-rancheros.iso
    # but it doesn't support shared volumes right now
    docker-machine create \
      -d virtualbox \
      --virtualbox-disk-size "30000" \
      --virtualbox-hostonly-cidr "192.168.99.1/24" \
      --virtualbox-memory "2048" \
      --virtualbox-cpu-count "2" \
      $DOCKER_MACHINE_NAME
  else
    ## Start the box if it's stopped
    if (docker_machine_query --filter state=Stopped) || (docker_machine_query --filter state=Saved); then
      echo "-- Docker machine $DOCKER_MACHINE_NAME is not running. Starting."

      docker-machine start $DOCKER_MACHINE_NAME
    else
      echo "-- Docker machine $DOCKER_MACHINE_NAME is running."
    fi
  fi

  eval "$(docker-machine env $DOCKER_MACHINE_NAME)"
}

UPDATE_HOSTS=""
function promptForUpdate {
  case "$UPDATE_HOSTS" in
    "YES") return 0;;
    "NO") return 1;;
  esac

  >&2 echo "Warning. Your current $HOSTNAME ($CURRENT_ALIAS) hostname does not match the IP $IP"
  read -p "Would you like to update your hostfile? Requires sudo [yN] " -r
  echo
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    UPDATE_HOSTS="YES"
    return 0
  else
    UPDATE_HOSTS="NO"
    return 1
  fi
}

function setupHostAlias {
  HOSTNAME=$1
  IP=$2
  CURRENT_ALIAS=$(grep " $HOSTNAME *$" /etc/hosts|sed 's/ .*//' || echo '')
  if [[ "$CURRENT_ALIAS" != "$IP" ]]; then
    if promptForUpdate; then
      TMP_HOSTS_FILE="/tmp/hosts.start.$RANDOM"
      sudo /bin/sh -c "
        grep -v \" $HOSTNAME *$\" /etc/hosts > \"$TMP_HOSTS_FILE\" &&
        echo \"$IP $HOSTNAME\" >> \"$TMP_HOSTS_FILE\" &&
        cat \"$TMP_HOSTS_FILE\" > /etc/hosts &&
        rm -f \"$TMP_HOSTS_FILE\"
      "
    else
      echo Remember to add \'"$IP" "$HOSTNAME"\' to your /etc/hosts file
    fi

  fi
}

function startDockerServices {
  echo "-- Starting services using docker-compose"
  docker-compose up -d --no-recreate
}

if ! has_local_docker_install; then
  startDockerMachine
fi

DOCKER_HOST_IP="$(get_ip)"
export DOCKER_HOST_IP

WORKSPACE="$(pwd)"
export WORKSPACE

NODE_VERSION=$(node --version)
NODE_VERSION=${NODE_VERSION#v} # Drop the `v` prefix
export NODE_VERSION

setupHostAlias gitter-mongo-dev "$DOCKER_HOST_IP"
setupHostAlias gitter-redis-dev "$DOCKER_HOST_IP"
setupHostAlias gitter-neo4j-dev "$DOCKER_HOST_IP"
setupHostAlias gitter-es-dev    "$DOCKER_HOST_IP"

startDockerServices

if ! has_local_docker_install; then
  docker-machine env "${DOCKER_MACHINE_NAME}"
fi

if ! docker-machine ssh default test -f /etc/docker/daemon.json; then
  docker-machine scp ${SCRIPT_DIR}/scripts/docker/daemon.json default:/tmp/docker-daemon.json
  docker-machine ssh default sudo mv /tmp/docker-daemon.json /etc/docker/daemon.json

  # echo 'EXTRA_ARGS="${EXTRA_ARGS} --insecure-registry docker-registry.service.beta.gitter"' | docker-machine ssh default sudo tee -a /var/lib/boot2docker/profile

  docker-machine ssh default sudo /etc/init.d/docker restart
fi
